package link

import (
	"fmt"

	"github.com/joeychilson/links/components/comment"
	"github.com/joeychilson/links/components/link"
	"github.com/joeychilson/links/components/reply"
	"github.com/joeychilson/links/database"
	"github.com/joeychilson/links/pages/layout"
	"github.com/joeychilson/links/pkg/session"
)

type Props struct {
	User        *session.User
	Link        database.FeedRow
	CommentFeed []database.CommentRow
}

templ Page(props Props) {
	@layout.Layout(layout.Props{Title: props.Link.Title, User: props.User}) {
		@link.Component(link.Props{User: props.User, Link: props.Link, RedirectURL: fmt.Sprintf("/link?id=%s", props.Link.ID)})
		@CommentFeed(CommentFeedProps{User: props.User, LinkID: props.Link.ID.String(), CommentFeed: props.CommentFeed})
	}
}

type CommentFeedProps struct {
	User        *session.User
	LinkID      string
	CommentFeed []database.CommentRow
}

templ CommentFeed(props CommentFeedProps) {
	<div id="comment-feed">
		if props.User != nil {
			@reply.Component(reply.Props{LinkID: props.LinkID})
		}
		@Comments(CommentsProps{CommentFeed: props.CommentFeed})
	</div>
}

type CommentsProps struct {
	User        *session.User
	CommentFeed []database.CommentRow
	Depth       int
}

templ Comments(props CommentsProps) {
	for _, row := range props.CommentFeed {
		<div class={ indent(props.Depth) }>
			@comment.Component(comment.Props{User: props.User, Comment: row})
			if len(row.Children) > 0 {
				@Comments(CommentsProps{User: props.User, CommentFeed: row.Children, Depth: props.Depth + 1})
			}
		</div>
	}
}

func indent(depth int) string {
	if depth == 0 {
		return ""
	}
	return fmt.Sprintf("ml-%d", depth*2)
}
