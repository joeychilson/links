package link

import (
	"fmt"

	"github.com/joeychilson/links/components/comment"
	"github.com/joeychilson/links/components/link"
	"github.com/joeychilson/links/database"
	"github.com/joeychilson/links/pages/layout"
	"github.com/joeychilson/links/pkg/session"
)

type Props struct {
	User        *session.User
	Link        database.FeedRow
	CommentFeed []database.CommentRow
}

templ Page(props Props) {
	@layout.Layout(layout.Props{Title: props.Link.Title, User: props.User}) {
		@link.Component(link.Props{User: props.User, Link: props.Link, RedirectURL: fmt.Sprintf("/link?id=%s", props.Link.ID)})
		@CommentFeed(CommentFeedProps{User: props.User, LinkID: props.Link.ID.String(), CommentFeed: props.CommentFeed})
	}
}

type CommentFeedProps struct {
	User        *session.User
	LinkID      string
	CommentFeed []database.CommentRow
}

templ CommentFeed(props CommentFeedProps) {
	<div id="comment-feed">
		if props.User != nil {
			<div class="mb-4 bg-white border border-gray-300 shadow overflow-hidden sm:rounded-lg">
				<div class="px-4 py-4">
					<form hx-post="/comment" hx-target="#comment-feed" hx-swap="outerHTML" style="margin-bottom: 0;">
						<input type="hidden" name="link_id" value={ props.LinkID }/>
						<textarea
 							id="content"
 							name="content"
 							rows="4"
 							class="w-full rounded-lg text-sm border-gray-200 border p-2"
 							placeholder="Leave a comment..."
						></textarea>
						<button
 							type="submit"
 							class="mt-3 bg-blue-600 text-white rounded-md px-4 py-2 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-300 ease-in-out"
						>
							Reply
						</button>
					</form>
				</div>
			</div>
		}
		@Comments(CommentsProps{CommentFeed: props.CommentFeed})
	</div>
}

type CommentsProps struct {
	User        *session.User
	CommentFeed []database.CommentRow
	Depth       int
}

templ Comments(props CommentsProps) {
	for _, row := range props.CommentFeed {
		<div class={ indent(props.Depth) }>
			@comment.Component(comment.Props{User: props.User, Comment: row})
			<div id={ fmt.Sprintf("reply-%s", row.ID) }></div>
			if len(row.Children) > 0 {
				@Comments(CommentsProps{User: props.User, CommentFeed: row.Children, Depth: props.Depth + 1})
			}
		</div>
	}
}

func indent(depth int) string {
	if depth == 0 {
		return ""
	}
	return fmt.Sprintf("ml-%d", depth+2)
}
