package link

import (
	"fmt"
	"time"
	"strconv"

	"github.com/joeychilson/links/database"
)

type Props struct {
	Link database.LinkFeedRow
}

templ Component(props Props) {
	<div class="mb-4 bg-white shadow overflow-hidden sm:rounded-lg hover:bg-gray-50 transition-colors duration-300">
		<div class="flex items-center">
			<div class="flex flex-col items-center justify-center px-4 py-2">
				<a href={ templ.SafeURL(fmt.Sprintf("/vote?link_id=%s", props.Link.ID.String())) }>
					<button class={ "font-semibold rounded-md text-white focus:outline-none transition duration-300 ease-in-out px-3 py-1.5" + " " + buttonColor(props.Link.UserVoted) }>
						{ strconv.Itoa(int(props.Link.VoteCount)) }
					</button>
				</a>
			</div>
			<a href={ templ.SafeURL(props.Link.Url) } class="block flex-grow" aria-label="{ props.Link.Title }">
				<div class="flex flex-col justify-between py-2">
					<p class="font-bold text-blue-600 truncate align-middle">{ props.Link.Title }</p>
					<div>
						<p class="text-sm text-gray-500 align-middle">
							{ fmt.Sprintf("Shared by %v", props.Link.Username) } &middot; { TimeAgo(props.Link.CreatedAt.Time.Unix()) } &middot; { fmt.Sprintf("%v comments", props.Link.CommentCount) }
						</p>
					</div>
				</div>
			</a>
		</div>
	</div>
}

func buttonColor(voted int64) string {
	fmt.Println(voted)

	if voted == 1 {
		return "bg-green-600 hover:bg-green-700"
	}
	return "bg-blue-500 hover:bg-blue-600 "
}

func TimeAgo(postTime int64) string {
	now := time.Now()
	postTimeUTC := time.Unix(postTime, 0)
	duration := now.Sub(postTimeUTC)

	if duration < time.Minute {
		return "just now"
	} else if duration < time.Hour {
		if duration/time.Minute == 1 {
			return "1 minute ago"
		}
		return fmt.Sprintf("%d minutes ago", duration/time.Minute)
	} else if duration < time.Hour*24 {
		if duration/time.Hour == 1 {
			return "1 hour ago"
		}
		return fmt.Sprintf("%d hours ago", duration/time.Hour)
	} else if duration < time.Hour*24*31 {
		if duration/(time.Hour*24) == 1 {
			return "1 day ago"
		}
		return fmt.Sprintf("%d days ago", duration/(time.Hour*24))
	} else if duration < time.Hour*24*365 {
		months := duration / (time.Hour * 24 * 30)
		if months <= 1 {
			return "1 month ago"
		}
		return fmt.Sprintf("%d months ago", months)
	}

	years := duration / (time.Hour * 24 * 365)
	if years <= 1 {
		return "1 year ago"
	}
	return fmt.Sprintf("%d years ago", years)
}
