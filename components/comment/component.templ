package comment

import (
	"fmt"
	"strconv"

	"github.com/joeychilson/links/db"
	"github.com/joeychilson/links/pkg/session"
	"github.com/joeychilson/links/pkg/time"
	"github.com/google/uuid"
)

type Props struct {
	User       *session.User
	CommentRow db.CommentRow
}

templ Component(props *Props) {
	<div
 		id={ fmt.Sprintf("comment-%s", props.CommentRow.ID) }
 		class="mt-4 bg-white border shadow-sm rounded-xl hover:shadow-md transition relative dark:bg-slate-800 dark:border-gray-700"
	>
		<div class="flex flex-col justify-between">
			<div class="flex py-2">
				<div class="px-3">
					@VotingButtons(&VotingButtonsProps{
						Slug:      props.CommentRow.LinkSlug,
						CommentID: props.CommentRow.ID,
						UserVote:  props.CommentRow.UserVote,
						Score:     props.CommentRow.Score,
					})
				</div>
				<div class="flex-1 overflow-auto">
					<p class="text-sm text-gray-500 dark:text-gray-200">
						Posted By
						<a href={ templ.SafeURL(fmt.Sprintf("/user?name=%s", props.CommentRow.Username)) } class="text-blue-600 hover:underline">
							{ props.CommentRow.Username }
						</a>
						&middot; 
						{ time.TimeAgo(props.CommentRow.CreatedAt.Unix()) }
						&middot; 
						{ fmt.Sprintf("%v replies", props.CommentRow.Replies) }
					</p>
					<p class="break-all min-w-0 max-w-full pr-4 mt-2 text-sm text-gray-600 dark:text-gray-200">
						{ props.CommentRow.Content }
					</p>
				</div>
			</div>
			<div class="p-2 text-right">
				<a
 					hx-get={ fmt.Sprintf("/%s/comment/%s", props.CommentRow.LinkSlug, props.CommentRow.ID) }
				>
					<button class="text-sm text-gray-600 underline hover:text-gray-500 dark:text-gray-200">
						Reply
					</button>
				</a>
			</div>
		</div>
	</div>
}

type VotingButtonsProps struct {
	Slug      string
	CommentID uuid.UUID
	UserVote  int16
	Score     int64
}

templ VotingButtons(props *VotingButtonsProps) {
	<div class="flex flex-col items-center">
		<div hx-get={ fmt.Sprintf("/%s/comment/%s/upvote", props.Slug, props.CommentID) } hx-target={ fmt.Sprintf("#comment-%s", props.CommentID) } hx-swap="outerHTML">
			<button class="text-green-500 disabled:opacity-50 disabled:pointer-events-none">
				if props.UserVote == 1 {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 18.75 7.5-7.5 7.5 7.5"></path>
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 7.5-7.5 7.5 7.5"></path>
					</svg>
				} else {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5"></path>
					</svg>
				}
			</button>
		</div>
		<span class="text-gray-800 dark:text-white">
			{ strconv.Itoa(int(props.Score)) }
		</span>
		<div hx-get={ fmt.Sprintf("/%s/comment/%s/downvote", props.Slug, props.CommentID) } hx-target={ fmt.Sprintf("#comment-%s", props.CommentID) } hx-swap="outerHTML">
			<button class="text-red-500 disabled:opacity-50 disabled:pointer-events-none">
				if  props.UserVote == -1 {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 5.25 7.5 7.5 7.5-7.5m-15 6 7.5 7.5 7.5-7.5"></path>
					</svg>
				} else {
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
						<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"></path>
					</svg>
				}
			</button>
		</div>
	</div>
}
