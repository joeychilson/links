package link

import (
	"fmt"
	"time"

	"github.com/joeychilson/links/database"
	"github.com/joeychilson/links/pkg/session"
)

type Props struct {
	User        *session.User
	Link        database.LinkRow
	RedirectURL string
}

templ Component(props Props) {
	<div class="mb-4 bg-white shadow overflow-hidden sm:rounded-lg hover:bg-gray-50 transition-colors duration-300">
		<div class="flex items-center">
			<div class="flex flex-col items-center justify-center px-4 py-2">
				<a href={ templ.SafeURL(fmt.Sprintf("/like?link_id=%s&redirect_url=%s", props.Link.ID.String(), props.RedirectURL)) }>
					<button class={ "font-semibold rounded-md focus:outline-none transition duration-300 ease-in-out" + " " + starButtonClass(props.Link.UserLiked) }>
						if props.Link.UserLiked == 1 {
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8">
								<path d="M7.493 18.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V2.75A.75.75 0 0 1 15 2a2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z"></path>
							</svg>
						} else {
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.25c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V2.75a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282m0 0h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23H5.904m10.598-9.75H14.25M5.904 18.5c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 0 1-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 9.953 4.167 9.5 5 9.5h1.053c.472 0 .745.556.5.96a8.958 8.958 0 0 0-1.302 4.665c0 1.194.232 2.333.654 3.375Z"></path>
							</svg>
						}
					</button>
				</a>
			</div>
			<div class="flex flex-col justify-between py-2">
				<a href={ templ.SafeURL(props.Link.Url) }>
					<p class="font-bold text-blue-600 hover:underline">{ props.Link.Title }</p>
				</a>
				<div>
					<p class="text-sm text-gray-500">
						Shared By
						<a href={ templ.SafeURL(fmt.Sprintf("/user?name=%s", props.Link.Username)) } class="hover:underline">
							{ props.Link.Username }
						</a>
						&middot; 
						{ timeAgo(props.Link.CreatedAt.Time.Unix()) }
						&middot; 
						{ fmt.Sprintf("%v likes", props.Link.LikeCount) }
						&middot; 
						<a href={ templ.SafeURL(fmt.Sprintf("/link?id=%s", props.Link.ID)) } class="hover:underline">
							{ fmt.Sprintf("%v comments", props.Link.CommentCount) }
						</a>
					</p>
				</div>
			</div>
		</div>
	</div>
}

func starButtonClass(voted int32) string {
	if voted == 1 {
		return "text-yellow-400 hover:text-yellow-500"
	}
	return "text-gray-400 hover:text-gray-500"
}

func timeAgo(postTime int64) string {
	now := time.Now()
	postTimeUTC := time.Unix(postTime, 0)
	duration := now.Sub(postTimeUTC)

	if duration < time.Minute {
		return "just now"
	} else if duration < time.Hour {
		if duration/time.Minute == 1 {
			return "1 minute ago"
		}
		return fmt.Sprintf("%d minutes ago", duration/time.Minute)
	} else if duration < time.Hour*24 {
		if duration/time.Hour == 1 {
			return "1 hour ago"
		}
		return fmt.Sprintf("%d hours ago", duration/time.Hour)
	} else if duration < time.Hour*24*31 {
		if duration/(time.Hour*24) == 1 {
			return "1 day ago"
		}
		return fmt.Sprintf("%d days ago", duration/(time.Hour*24))
	} else if duration < time.Hour*24*365 {
		months := duration / (time.Hour * 24 * 30)
		if months <= 1 {
			return "1 month ago"
		}
		return fmt.Sprintf("%d months ago", months)
	}

	years := duration / (time.Hour * 24 * 365)
	if years <= 1 {
		return "1 year ago"
	}
	return fmt.Sprintf("%d years ago", years)
}
