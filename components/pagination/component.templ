package pagination

import (
	"fmt"
	"strconv"
)

type Props struct {
	CurrentPage int64
	TotalPages  int64
	Pages       []int64
}

templ Component(props Props) {
	<nav class="flex items-center gap-x-1 mt-4 mb-4">
		if props.CurrentPage > 1 {
			<a
 				href={ templ.URL(fmt.Sprintf("?page=%v", max(1, props.CurrentPage-1))) }
 				class="min-h-[38px] min-w-[38px] py-2 px-2.5 inline-flex justify-center items-center gap-x-1.5 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"
			>
				<svg class="flex-shrink-0 w-3.5 h-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"></path></svg>
				<span>Previous</span>
			</a>
		}
		<div class="flex items-center gap-x-1">
			for _, num := range props.Pages {
				if num == props.CurrentPage {
					<a
 						href={ templ.URL(fmt.Sprintf("?page=%v", num)) }
 						class="min-h-[38px] min-w-[38px] flex justify-center items-center py-2 px-3 text-sm rounded-lg focus:outline-none disabled:pointer-events-none disabled:opacity-50 bg-gray-200 text-gray-800 focus:bg-gray-300 dark:bg-gray-600 dark:text-white dark:focus:bg-gray-500"
 						aria-current="page"
					>{ strconv.Itoa(int(num)) }</a>
				} else {
					<a
 						href={ templ.URL(fmt.Sprintf("?page=%v", num)) }
 						class="min-h-[38px] min-w-[38px] flex justify-center items-center py-2 px-3 text-sm rounded-lg focus:outline-none disabled:pointer-events-none disabled:opacity-50 text-gray-800 hover:bg-gray-100 focus:bg-gray-100 dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"
					>{ strconv.Itoa(int(num)) }</a>
				}
			}
		</div>
		if props.CurrentPage < props.TotalPages {
			<a
 				href={ templ.URL(fmt.Sprintf("?page=%v", min(props.CurrentPage+1, props.TotalPages))) }
 				class="min-h-[38px] min-w-[38px] py-2 px-2.5 inline-flex justify-center items-center gap-x-1.5 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10"
			>
				<span>Next</span>
				<svg class="flex-shrink-0 w-3.5 h-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg>
			</a>
		}
	</nav>
}

func Pages(currentPage, totalPages, maxPagesToShow int64) []int64 {
	var pages []int64

	startPage := max(1, currentPage-maxPagesToShow/2)
	endPage := min(totalPages, startPage+maxPagesToShow-1)

	if endPage-startPage < maxPagesToShow {
		startPage = max(1, endPage-maxPagesToShow+1)
	}

	for i := startPage; i <= endPage; i++ {
		pages = append(pages, i)
	}
	return pages
}
