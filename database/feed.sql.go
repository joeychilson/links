// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: feed.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const articleFeed = `-- name: ArticleFeed :many
SELECT 
    a.id AS article_id,
    a.title,
    a.link,
    a.created_at,
    u.username,
    COUNT(DISTINCT c.id) AS comment_count,
    COUNT(DISTINCT l.id) AS like_count
FROM 
    articles a
JOIN 
    users u ON a.user_id = u.id
LEFT JOIN 
    comments c ON a.id = c.article_id
LEFT JOIN 
    likes l ON a.id = l.article_id
GROUP BY 
    a.id, u.username
ORDER BY 
    a.created_at DESC
LIMIT 
    $1
OFFSET 
    $2
`

type ArticleFeedParams struct {
	Limit  int32
	Offset int32
}

type ArticleFeedRow struct {
	ArticleID    uuid.UUID
	Title        string
	Link         string
	CreatedAt    pgtype.Timestamptz
	Username     string
	CommentCount int64
	LikeCount    int64
}

func (q *Queries) ArticleFeed(ctx context.Context, arg ArticleFeedParams) ([]ArticleFeedRow, error) {
	rows, err := q.db.Query(ctx, articleFeed, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleFeedRow
	for rows.Next() {
		var i ArticleFeedRow
		if err := rows.Scan(
			&i.ArticleID,
			&i.Title,
			&i.Link,
			&i.CreatedAt,
			&i.Username,
			&i.CommentCount,
			&i.LikeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countLikes = `-- name: CountLikes :one
SELECT COUNT(*) FROM likes WHERE article_id = $1
`

func (q *Queries) CountLikes(ctx context.Context, articleID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countLikes, articleID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArticle = `-- name: CreateArticle :exec
INSERT INTO articles (user_id, title, link) VALUES ($1, $2, $3)
`

type CreateArticleParams struct {
	UserID uuid.UUID
	Title  string
	Link   string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) error {
	_, err := q.db.Exec(ctx, createArticle, arg.UserID, arg.Title, arg.Link)
	return err
}

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (user_id, article_id) VALUES ($1, $2)
`

type CreateLikeParams struct {
	UserID    uuid.UUID
	ArticleID uuid.UUID
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.db.Exec(ctx, createLike, arg.UserID, arg.ArticleID)
	return err
}
