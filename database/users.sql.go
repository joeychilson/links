// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, email, password) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.Email, arg.Password)
	return err
}

const createUserToken = `-- name: CreateUserToken :exec
INSERT INTO user_tokens (user_id, token, context, expires_at) VALUES ($1, $2, $3, $4)
`

type CreateUserTokenParams struct {
	UserID    int32
	Token     string
	Context   string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) error {
	_, err := q.db.Exec(ctx, createUserToken,
		arg.UserID,
		arg.Token,
		arg.Context,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM user_tokens WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
DELETE FROM user_tokens WHERE id = $1
`

func (q *Queries) DeleteUserToken(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserToken, id)
	return err
}

const findTokensByUserID = `-- name: FindTokensByUserID :many
SELECT id, user_id, token, context, created_at, expires_at FROM user_tokens WHERE user_id = $1
`

func (q *Queries) FindTokensByUserID(ctx context.Context, userID int32) ([]UserToken, error) {
	rows, err := q.db.Query(ctx, findTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserToken
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Context,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, username, email, password, confirmed_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ConfirmedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = $1, username = $2 WHERE id = $3
`

type UpdateUserParams struct {
	Email    string
	Username string
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Email, arg.Username, arg.ID)
	return err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE user_tokens SET expires_at = $1 WHERE id = $2
`

type UpdateUserTokenParams struct {
	ExpiresAt pgtype.Timestamptz
	ID        int32
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserToken, arg.ExpiresAt, arg.ID)
	return err
}
